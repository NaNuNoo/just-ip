export declare type IpV4Like = IpV4 | string | number | Array<number>;
export declare function castIpV4(ip: IpV4Like): IpV4;
export declare class IpV4 {
    private _b1;
    private _b2;
    private _b3;
    private _b4;
    private _int;
    static fromString(str: string): IpV4;
    static tryString(str: string): IpV4 | null;
    static fromInt(int: number): IpV4;
    static tryInt(int: number): IpV4 | null;
    static fromIntBe(int: number): IpV4;
    static tryIntBe(int: number): IpV4 | null;
    static fromIntLe(int: number): IpV4;
    static tryIntLe(int: number): IpV4 | null;
    static fromBytes(b1: number, b2: number, b3: number, b4: number): IpV4;
    static tryBytes(b1: number, b2: number, b3: number, b4: number): IpV4 | null;
    static fromArray(array: Array<number>): IpV4;
    static tryArray(array: Array<number>): IpV4 | null;
    toString(): string;
    toInt(): number;
    toIntBe(): number;
    toIntLe(): number;
    toArray(): Array<number>;
    equal(ip: IpV4): boolean;
    static equal(ip1: IpV4Like, ip2: IpV4Like): boolean;
    isUnspecified(): boolean;
    static isUnspecified(ip: IpV4Like): boolean;
    isLoopback(): boolean;
    static isLoopback(ip: IpV4Like): boolean;
    isPrivate(): boolean;
    static isPrivate(ip: IpV4Like): boolean;
    isLinkLocal(): boolean;
    static isLinkLocal(ip: IpV4Like): boolean;
    isMulticast(): boolean;
    static isMulticast(ip: IpV4Like): boolean;
    isBroadcast(): boolean;
    static isBroadcast(ip: IpV4Like): boolean;
    isDocumentation(): boolean;
    static isDocumentation(ip: IpV4Like): boolean;
    isGlobal(): boolean;
    static isGlobal(ip: IpV4Like): boolean;
}
