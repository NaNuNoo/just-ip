import { IpV4, IpV4Like } from './ipv4';
export declare type NetV4Like = NetV4 | string;
export declare function castNetV4(net: NetV4Like): NetV4;
export declare class NetV4 {
    private _base;
    private _mask;
    private _prefix;
    static fromString(str: string): NetV4;
    static tryString(str: string): NetV4 | null;
    static fromStringPrefix(str: string): NetV4;
    static tryStringPrefix(str: string): NetV4 | null;
    static fromStringMask(str: string): NetV4;
    static tryStringMask(str: string): NetV4 | null;
    static fromStringRange(str: string): NetV4;
    static tryStringRange(str: string): NetV4 | null;
    static fromIpPrefix(ip: IpV4, prefix: number): NetV4;
    static tryIpPrefix(ip: IpV4, prefix: number): NetV4 | null;
    static fromIpMask(ip: IpV4, mask: IpV4): NetV4;
    static tryIpMask(ip: IpV4, mask: IpV4): NetV4 | null;
    static fromIpRange(start: IpV4, finish: IpV4): NetV4;
    static tryIpRange(start: IpV4, finish: IpV4): NetV4 | null;
    toString(): string;
    toStringPrefix(): string;
    toStringMask(): string;
    toStringRange(): string;
    getPrefixLen(): number;
    getSize(): number;
    getMask(): IpV4;
    getMask(type: 'ip'): IpV4;
    getMask(type: 'he' | 'be' | 'le'): number;
    getMask(type: 'str'): string;
    getMask(type: 'arr'): Array<number>;
    getHostMask(): IpV4;
    getHostMask(type: 'ip'): IpV4;
    getHostMask(type: 'he' | 'be' | 'le'): number;
    getHostMask(type: 'str'): string;
    getHostMask(type: 'arr'): Array<number>;
    getStart(): IpV4;
    getStart(type: 'ip'): IpV4;
    getStart(type: 'he' | 'be' | 'le'): number;
    getStart(type: 'str'): string;
    getStart(type: 'arr'): Array<number>;
    getFinish(): IpV4;
    getFinish(type: 'ip'): IpV4;
    getFinish(type: 'he' | 'be' | 'le'): number;
    getFinish(type: 'str'): string;
    getFinish(type: 'arr'): Array<number>;
    getBase(): IpV4;
    getBase(type: 'ip'): IpV4;
    getBase(type: 'he' | 'be' | 'le'): number;
    getBase(type: 'str'): string;
    getBase(type: 'arr'): Array<number>;
    getBroadcast(): IpV4;
    getBroadcast(type: 'ip'): IpV4;
    getBroadcast(type: 'he' | 'be' | 'le'): number;
    getBroadcast(type: 'str'): string;
    getBroadcast(type: 'arr'): Array<number>;
    isUnspecified(): boolean;
    static isUnspecified(net: NetV4Like): boolean;
    isLoopback(): boolean;
    static isLoopback(net: NetV4Like): boolean;
    isPrivate(): boolean;
    static isPrivate(net: NetV4Like): boolean;
    isLinkLocal(): boolean;
    static isLinkLocal(net: NetV4Like): boolean;
    isMulticast(): boolean;
    static isMulticast(net: NetV4Like): boolean;
    isBroadcast(): boolean;
    static isBroadcast(net: NetV4Like): boolean;
    isDocumentation(): boolean;
    static isDocumentation(net: NetV4Like): boolean;
    isGlobal(): boolean;
    static isGlobal(net: NetV4Like): boolean;
    containIP(ip: IpV4): boolean;
    static containIP(net: NetV4Like, ip: IpV4Like): boolean;
    containNet(net: NetV4): boolean;
    static containNet(net1: NetV4Like, net2: NetV4Like): boolean;
    equal(net: NetV4): boolean;
    static equal(net1: NetV4Like, net2: NetV4Like): boolean;
    forEachIP(func: (ip: IpV4) => void): void;
    forEachInt(func: (int: number) => void): void;
}
